RRT* is a path planning algorithm used in motion planning of robots and AMRs.
This works in both 3D and 2D environments. For the sake of simplicity, I am gonna try to implemnet this via 2D grid method.
Implementation
If we can imagine 2D space, to find the coordinates, we divide the 2D space into grids.
In A* metod, we assign cost values with respect to how far is the grid node from the current positon from the start to the goal positon. This fills up the entire grid with cost values for each node. Due to this, it becomes extremely costly to compute.
One way to simplify this problem is to select random points on the grid and create a node towards the goal direction with a thresold constant length from the starting node or connected towards the nearest node towards the goal, while avoiding obstacles. And repeating this process until the goal node is reached while. This is RRT.
RRT* adds a few more steps to fine tune RRT. Here, everything is same as RRT except, after the creation of each new node, it checks its surrounding by a set radius for the presence of other pre existing nodes, if found, it calculates the cost of the current node connection and compares it to the cost of the alternate path via the other surrounding nodes. It computes the most cost efficient path to travel and updates the node each time a less expensive node path is found. This process is repeated till the goal point is reached and connected by the node graph. This can also go on after finding the goal path and it can improve its path constantly to make it even more cost efficient, thus giving an ideal smooth close to straight path. RRT* is computationally slightly expensive than RRT but not so much as A*, hence making it a great choice for path planning.
